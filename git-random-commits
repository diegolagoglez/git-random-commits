#!/bin/bash

DRY_RUN=
USE_DIRECTORIES=
COMMIT_COUNT=1
FILES_PER_COMMIT=1
VERBOSE=

COMMIT_RANDOM_MESSAGE_URL=http://whatthecommit.com/index.txt

FILENAMES=(main manager component controller action utils crypt build security sound driver
           parser json xml view serializer icon system network config base dashboard login
           widget vendor bootstrap highlight ajax core default store language loader writer
           reader model test lint helper package notification navigator message router admin
           setting environment module service about index home branch release project nav
           timeline commit bar api http https user auth mock humans robots lock blocker url
           www library lib sql database table tmp bin binary function procedure receiver
           sender post pre merger chart reviewer task monitor detail feed schedule revert)

FILENAMES_COUNT=${#FILENAMES[@]}

EXTENSIONS=(.txt .h .c .hpp .cpp .d .py .rb .sh .s .md .pdf .csv .gif .jpg .svg .css .html
            .php .js .png .so .pl .ttf .yaml .json .xml .log .am .in .mk .tar .gz .tar.gz
            .m4 .go .asm .java .hxx .cxx .di .lib .ini .cfg .conf .pm .url .zip .ada .cc
            .dtd .idl .lisp .o .obj .pas .res .ui .uml .dat .ac .dts .sys .rar .xz .boot)

EXTENSIONS_COUNT=${#EXTENSIONS[@]}

function error() {
	echo "ERROR: $1" 1>&2
	exit $2
}

function verbose() {
	if [ ! -z "$VERBOSE" ]; then
		echo "$*"
	fi
}

function join_by() {
	local IFS="$1"
	shift
	echo "$*"
}

function is_dry_run() {
	test ! -z "$DRY_RUN"
}

function get_random_commit_message() {
	curl -s "$COMMIT_RANDOM_MESSAGE_URL"
}

function get_random_file_name() {
	local r=$((RANDOM % FILENAMES_COUNT))
	echo ${FILENAMES[$r]}
}

function get_random_extension() {
	local r=$((RANDOM % EXTENSIONS_COUNT))
	echo ${EXTENSIONS[$r]}
}

function construct_random_filename() {
	local part_count_prob=(1 1 1 1 2 2 2 2 3 3)
	local c=${#part_count_prob[@]}
	local r=$((RANDOM % $c))
	local parts=${part_count_prob[$r]}
	local filenames=()
	local dir=
	for n in $(seq 1 $parts); do
		if [ ! -z "$USE_DIRECTORIES" ]; then
			dir="$(get_random_file_name)/"
		fi
		filenames+=($(get_random_file_name))
	done
	echo "$dir$(join_by '_' ${filenames[*]})$(get_random_extension)"
}

function show_file_names_and_extensions() {
	echo "-----Base File Names-----"
	echo ${FILENAMES[*]}
	echo "-----Base Extensions-----"
	echo ${EXTENSIONS[*]}
}

function show_help() {
	cat <<EOF
$(basename -- $0) - Utility to generate random commits in a Git repository.
GPLv3 - Diego Lago <diego.lago.gonzalez@gmail.com>
Usage: $(basename -- $0) [options]
Options:
  -d           Use random directories to create files.
  -D           Dry run mode (do not commit).
  -l           List file names and extensions used to generate random file names.
  -n N         Generate N number of commits (default: $COMMIT_COUNT).
  -N N         Use N files to create the commit (default: $FILES_PER_COMMIT).
  -v           Be verbose.
  -h           Show this help and exit.
EOF
}

function process_options() {
	while getopts ":hdDln:N:v" opt; do
		case "$opt" in
			d)
				USE_DIRECTORIES=yes
			;;
			D)
				DRY_RUN=yes
			;;
			h)
				show_help
				exit 1
			;;
			l)
				show_file_names_and_extensions
				exit 0
			;;
			n)
				COMMIT_COUNT="$OPTARG"
			;;
			N)
				FILES_PER_COMMIT="$OPTARG"
			;;
			v)
				VERBOSE=yes
			;;
			\?)
				error "Invalid option: -$OPTARG" 1
			;;
			:)
				error "Option -$OPTARG requires an argument." 1
			;;
		esac
	done
}

function check_options() {
	:
}

function generate_commit() {
	local filepath=
	if is_dry_run; then
		# echo mkdir -p $(dirname -- $filepath)
		# echo touch $filepath
		for n in $(seq 1 $FILES_PER_COMMIT); do
			filepath=$(construct_random_filename)
			echo "  git add $filepath"
		done
		echo "  git commit --message "\"$(get_random_commit_message)\"""
	else
		for n in $(seq 1 $FILES_PER_COMMIT); do
			filepath=$(construct_random_filename)
			if ! mkdir -p $(dirname -- $filepath); then
				error "Cannot create directory: $(dirname -- $filepath)" 1
			fi
			if ! touch $filepath; then
				error "Cannot touch file: $filepath" 1
			fi
			if ! git add $filepath; then
				error "Cannot add file to Git repository: $filepath" 1
			fi
			verbose " + Add file to commit: $filepath"
		done
		local commit_message=$(get_random_commit_message)
		verbose " > Commiting with message '$commit_message'..."
		if ! git commit --message "$commit_message"; then
			error "Cannot commit in Git repository." 1
		fi
	fi
}

function main() {
	process_options	"$@"
	shift $OPTIND
	check_options
	verbose "Creating $COMMIT_COUNT random commits..."
	verbose "Using '$COMMIT_RANDOM_MESSAGE_URL' to generate random commit messages."
	for i in $(seq 1 $COMMIT_COUNT); do
		generate_commit
	done
	verbose "Done."
}

main "$@"
